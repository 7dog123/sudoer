# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CROSS_ROOT_DIR: /usr/local/build-envs/armhf
  CROSS_ARCH: armhf
  CROSS_DEBIAN_VER: buster
  #PSYDOOM_REPO_PATH: /usr/local/GIT/PsyDoom

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          sudo apt-get update
          sudo apt-get -y install qemu-user-static debootstrap
         
      - name: chroot 2
        run: |
          sudo debootstrap --no-check-gpg --foreign --arch=${{ env.CROSS_ARCH }} ${{ env.CROSS_DEBIAN_VER }} ${{ env.CROSS_ROOT_DIR }} http://archive.raspbian.org/raspbian
          sudo mkdir -p ${{ env.CROSS_ROOT_DIR }}
          sudo chroot ${{ env.CROSS_ROOT_DIR }} /debootstrap/debootstrap --second-stage
          echo deb http://mirrordirector.raspbian.org/raspbian/ ${{ env.CROSS_DEBIAN_VER }} main contrib non-free rpi | sudo tee ${{ env.CROSS_ROOT_DIR }}/etc/apt/sources.list
          echo deb http://archive.raspberrypi.org/debian/ ${{ env.CROSS_DEBIAN_VER }} main | sudo tee -a "${{ env.CROSS_ROOT_DIR }}/etc/apt/sources.list"
    
      - name: chroot 3
        run: |
          sudo chroot ${{ env.CROSS_ROOT_DIR }} apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E
          #sudo chroot "${{ env.CROSS_ROOT_DIR }}" /debootstrap/debootstrap --second-stage
          sudo chroot ${{ env.CROSS_ROOT_DIR }} apt-get update
          sudo chroot ${{ env.CROSS_ROOT_DIR }} apt-get -y upgrade
          sudo chroot ${{ env.CROSS_ROOT_DIR }} apt-get -y install cmake
          sudo chroot ${{ env.CROSS_ROOT_DIR }} apt-get autoclean

      - name: Check the current cmake version using the following command
        shell: bash
        run: |
          currentver="$(sudo chroot ${{ env.CROSS_ROOT_DIR }} cmake --version)"
          minimum_version="3.13.4"
          if [[ "$(printf '%s\n' "$minimum_version" "$currentver" | sort -V | head -n1)" -ge "$minimum_version" ]]; then
            echo "cmake is up to date with your current linux distrabution!"
          elif [[ "$(printf '%s\n' "$minimum_version" "$currentver" | sort -V | head -n1)" -lt "$minimum_version" ]]; then
            sudo chroot ${CROSS_ROOT_DIR}
            cd ${{ env.CROSS_ROOT_DIR }}
            mkdir cmake
            cd cmake
            apt -y install wget libssl-dev
            wget https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2.tar.gz
            tar -xf cmake-3.22.2.tar.gz
            cd cmake-3.22.2
            ./configure
            make install
            cd ../
            rm -rf cmake cmake-3.22.2.tar.gz
            exit
          fi
           
      #- name: chroot 4
       # run: |
         #cd "${{ env.CROSS_ROOT_DIR }}"
         #sudo tar -zcvf rootfs.tar.gz *

      #- name: Create pre-release
       # if: github.ref == 'refs/heads/master'
        #uses: softprops/action-gh-release@v1
       # with:
         # files: ${{ env.CROSS_ROOT_DIR }}/rootfs.tar.gz
        #  prerelease: false
         # tag_name: "latest"
      #  env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

